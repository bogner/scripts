#!/bin/bash

die () { echo "$(basename $0): $@" >&2; exit 1; }

repo_root="$(git rev-parse --show-toplevel 2>/dev/null)"
cd $repo_root || die "Not in git repository?"
[ $(basename $(pwd)) = clang ] && cd ../..
[ $(basename $(pwd)) = llvm ] || die "Not in LLVM repository?"

usage () {
    rc=$1; shift
    [ $# -gt 0 ] && echo "$@"
    echo "Usage: $0 [-n] [-b branch] <rev>"
    echo "Usage: $0 -h"
    exit $rc
}
args=$(getopt nb: $*) || usage 2
set -- $args

dry_run=false
branch=""
while true; do
    case "$1" in
        -h) usage 0;;
        -n) dry_run=true;;
        -b) branch="-b $2"; shift;;
        --) shift; break;;
    esac
    shift
done
[ $# -eq 1 ] || usage 2 "No revision specified"
rev="$1"

find_rev_before () {
    local branch=origin/master
    local rev=${1#r}
    local result="$(git log $branch |
                        awk -F"[ @]+" "/^ *git-svn-id/ {
                            if (\$4 <= $rev) { print \$4; exit; }
                        }")"
    [ -n "$result" ] || return 1
    echo "$branch^{/@$result}"
}

checkout () {
    echo -n "$(basename $(pwd)): "
    if $dry_run; then
        git log -1 --oneline $1
    else
        echo
        git checkout $branch $1 2>&1 | sed 's/^/    /'
    fi
}

for repo in $(find . -name .git -exec dirname \{} \;); do
    cd $repo
    repo=$(basename $(pwd))

    local_rev=$rev
    if [[ $local_rev == r* ]]; then
        local_rev="$(find_rev_before $rev)" || die "$rev not found in $repo"
    fi

    checkout $local_rev
    cd - >/dev/null
done
