#!/usr/bin/env python

import dbus, dbus.mainloop.qt
import signal
import sys
from PyQt4 import QtCore, QtGui, QtWebKit

def main(argv):
    # We want ctrl-c to kill qt
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    radio = Radio(argv)
    radio.choose_station()
    radio.window.show()

    configure_dbus(radio)

    return radio.exec_()

class Radio(QtGui.QApplication):
    def __init__(self, argv):
        QtGui.QApplication.__init__(self, argv)

        self.window = QtGui.QMainWindow()
        self.quitOnLastWindowClosed = True

        self.browser = QtWebKit.QWebView(
            titleChanged = self.window.setWindowTitle)
        self.window.setCentralWidget(self.browser)

        settings = self.browser.settings()
        settings.setAttribute(QtWebKit.QWebSettings.PluginsEnabled, True)

        self.station = Station(self.browser)
        QtGui.QShortcut("Ctrl+S", self.window, activated = self.choose_station)

    def choose_station(self):
        stations = dict((s.__name__, s) for s in Station.__subclasses__())
        station, ok = QtGui.QInputDialog.getItem(self.window,
                                                 "Choose a station",
                                                 "Station:",
                                                 stations.keys(),
                                                 editable = False)
        if ok:
            self.load_station(stations[str(station)])

    def load_station(self, station_type):
        self.station = station_type(self.browser)
        self.station.load()

    def handle_media_key(self, source, event):
        self.station.press_key(event)

class Station(object):
    def __init__(self, browser):
        self.browser = browser
        self.url = None

    def load(self):
        self.browser.load(QtCore.QUrl(self.url))

    def press_key(self):
        pass

class Pandora(Station):
    def __init__(self, browser):
        Station.__init__(self, browser)
        self.url = "http://www.pandora.com"
        self.is_paused = False

    def press_key(self, key):
        if key == "Play" and self.is_paused:
            cmd = "ext_play"
            self.is_paused = False
        elif key == "Play" or key == "Stop":
            cmd = "ext_pause"
            self.is_paused = True
        else:
            print "'%s' is not supported." % key
            return
        frame = self.browser.page().mainFrame()
        frame.evaluateJavaScript('Pandora.sendTunerCommand("%s", "");' % cmd)

class GrooveShark(Station):
    def __init__(self, browser):
        Station.__init__(self, browser)
        self.url = "http://www.grooveshark.com"

    def press_key(self, key):
        js_funcs = {"Play": "togglePlayPause",
                    "Stop": "pause",
                    "Previous": "previous",
                    "Next": "next"}
        frame = self.browser.page().mainFrame()
        frame.evaluateJavaScript("Grooveshark.%s();" % js_funcs[key])

def configure_dbus(radio):
    dbus.mainloop.qt.DBusQtMainLoop(set_as_default=True)

    bus = dbus.Bus(dbus.Bus.TYPE_SESSION)
    bus_object = bus.get_object('org.gnome.SettingsDaemon',
                                '/org/gnome/SettingsDaemon/MediaKeys')
    dbus_interface = 'org.gnome.SettingsDaemon.MediaKeys'
    bus_object.GrabMediaPlayerKeys("WebRadio", 0,
                                   dbus_interface = dbus_interface)
    bus_object.connect_to_signal('MediaPlayerKeyPressed',
                                 radio.handle_media_key)

if __name__ == "__main__":
    sys.exit(main(sys.argv))
